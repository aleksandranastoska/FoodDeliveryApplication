// <auto-generated />
using System;
using FoodDelivery.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FoodDelivery.Repository.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240915133240_favoriterestaurants")]
    partial class favoriterestaurants
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FoodDelivery.Domain.Domain.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Flat")
                        .HasColumnType("int");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("FoodDelivery.Domain.Domain.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("85338b36-abcc-42e1-aa51-58af04dec3d9"),
                            Image = "../Images/italian.png",
                            Name = "Italian"
                        },
                        new
                        {
                            Id = new Guid("4e447f00-0e01-4d35-911e-58d24ebaa0dd"),
                            Image = "../Images/chinese.png",
                            Name = "Chinese"
                        },
                        new
                        {
                            Id = new Guid("2efb20c9-3c50-4ac2-b869-015e03738529"),
                            Image = "../Images/mexican.png",
                            Name = "Mexican"
                        },
                        new
                        {
                            Id = new Guid("f3edf42b-81f0-4449-906e-8a50086d655e"),
                            Image = "../Images/indian.png",
                            Name = "Indian"
                        },
                        new
                        {
                            Id = new Guid("07c6e409-48c2-47a7-93b5-2706341d22ba"),
                            Image = "../Images/american.png",
                            Name = "American"
                        },
                        new
                        {
                            Id = new Guid("16018e6b-eebb-464d-a4e5-a5cfca3d92a8"),
                            Image = "../Images/greek.jfif",
                            Name = "Greek"
                        },
                        new
                        {
                            Id = new Guid("557e71e4-7aa3-42d0-8969-fcacc7aabce1"),
                            Image = "../Images/vegan.png",
                            Name = "Vegan"
                        },
                        new
                        {
                            Id = new Guid("04b1db63-c8a7-47c8-9437-62925f5d2cee"),
                            Image = "../Images/vegetarian.png",
                            Name = "Vegetarian"
                        },
                        new
                        {
                            Id = new Guid("8c2c89b5-48b1-40e1-84c1-84d31e3ae46c"),
                            Image = "../Images/healthy.png",
                            Name = "Healthy"
                        },
                        new
                        {
                            Id = new Guid("d477f411-7846-4f0e-bfd4-f03e0d1ac3bf"),
                            Image = "../Images/asian.png",
                            Name = "Asian"
                        },
                        new
                        {
                            Id = new Guid("764538a3-fd8b-41c1-801c-e164418c12c4"),
                            Image = "../Images/breakfast.png",
                            Name = "Breakfast"
                        },
                        new
                        {
                            Id = new Guid("3b2b2427-d40a-4e6f-98f6-930285cf1632"),
                            Image = "../Images/desserts.png",
                            Name = "Desserts"
                        });
                });

            modelBuilder.Entity("FoodDelivery.Domain.Domain.CategoryInRestaurant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("RestaurantId");

                    b.ToTable("CategoryInRestaurants");
                });

            modelBuilder.Entity("FoodDelivery.Domain.Domain.FavoriteRestaurants", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("bit");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("RestaurantId");

                    b.ToTable("FavoriteRestaurants");
                });

            modelBuilder.Entity("FoodDelivery.Domain.Domain.Food", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("FoodCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<Guid?>("RestaurantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FoodCategoryId");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Foods");
                });

            modelBuilder.Entity("FoodDelivery.Domain.Domain.FoodCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FoodCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d1d7a6ec-7844-442c-b7b3-3b062a83fe4b"),
                            Name = "Breakfast"
                        },
                        new
                        {
                            Id = new Guid("6c8db840-7dad-4aa5-95b7-99f5da87824b"),
                            Name = "Salads"
                        },
                        new
                        {
                            Id = new Guid("e93ad38e-2ebe-4655-9772-b88ff23aaccf"),
                            Name = "Pasta"
                        },
                        new
                        {
                            Id = new Guid("d626d3d1-8805-4c2a-8acf-00d7f8916ae0"),
                            Name = "Pizza"
                        },
                        new
                        {
                            Id = new Guid("49b5ef3e-38db-4288-8845-e812500b68fd"),
                            Name = "Desserts"
                        },
                        new
                        {
                            Id = new Guid("79127a4a-5c60-42a8-9c59-468690e94c2c"),
                            Name = "Alcoholic Beverages"
                        },
                        new
                        {
                            Id = new Guid("95ca0dd0-8e49-491e-9b56-c776d9dbd3a8"),
                            Name = "Soft Drinks"
                        },
                        new
                        {
                            Id = new Guid("c1508fb7-7200-4253-93fc-c1b6838e0233"),
                            Name = "Hot Drinks"
                        },
                        new
                        {
                            Id = new Guid("0caab6b8-2320-417b-8b01-a5e67a270528"),
                            Name = "Coffee"
                        },
                        new
                        {
                            Id = new Guid("25f77294-5784-4302-97d6-e443712bfffd"),
                            Name = "Main Course"
                        },
                        new
                        {
                            Id = new Guid("0dad64f3-a369-46b5-886d-f2bb74d500ae"),
                            Name = "Starters"
                        },
                        new
                        {
                            Id = new Guid("8c70f60f-d4b7-4fce-aee8-02711dc1d495"),
                            Name = "Brunch"
                        },
                        new
                        {
                            Id = new Guid("995ec756-d536-4ec0-9e50-3f9f7829cb77"),
                            Name = "Burgers"
                        },
                        new
                        {
                            Id = new Guid("f08fefc0-2216-452f-ae8a-c5466dc75295"),
                            Name = "Sandwiches"
                        },
                        new
                        {
                            Id = new Guid("69ea4594-e20d-481f-96aa-ee60cbf51776"),
                            Name = "Juices"
                        });
                });

            modelBuilder.Entity("FoodDelivery.Domain.Domain.FoodInOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FoodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FoodId");

                    b.HasIndex("OrderId");

                    b.ToTable("FoodInOrders");
                });

            modelBuilder.Entity("FoodDelivery.Domain.Domain.FoodInWishlist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FoodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid>("WishlistId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FoodId");

                    b.HasIndex("WishlistId");

                    b.ToTable("FoodInWishlists");
                });

            modelBuilder.Entity("FoodDelivery.Domain.Domain.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("FoodDelivery.Domain.Domain.Restaurant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("DeliveryTime")
                        .HasColumnType("int");

                    b.Property<bool?>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NumOfOrders")
                        .HasColumnType("int");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Rating")
                        .HasColumnType("float");

                    b.Property<string>("RestaurantImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TotalGrades")
                        .HasColumnType("int");

                    b.Property<TimeOnly?>("WorkingFrom")
                        .HasColumnType("time");

                    b.Property<TimeOnly?>("WorkingTo")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Restaurants");
                });

            modelBuilder.Entity("FoodDelivery.Domain.Domain.Wishlist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Wishlists");
                });

            modelBuilder.Entity("FoodDelivery.Domain.Identity.FoodDeliveryAppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FoodDelivery.Domain.Domain.Address", b =>
                {
                    b.HasOne("FoodDelivery.Domain.Identity.FoodDeliveryAppUser", "Owner")
                        .WithMany("DeliveryAddress")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("FoodDelivery.Domain.Domain.CategoryInRestaurant", b =>
                {
                    b.HasOne("FoodDelivery.Domain.Domain.Category", "Category")
                        .WithMany("CategoryInRestaurants")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodDelivery.Domain.Domain.Restaurant", "Restaurant")
                        .WithMany("CategoryInRestaurants")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("FoodDelivery.Domain.Domain.FavoriteRestaurants", b =>
                {
                    b.HasOne("FoodDelivery.Domain.Identity.FoodDeliveryAppUser", "Owner")
                        .WithMany("FavoriteRestaurants")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodDelivery.Domain.Domain.Restaurant", "Restaurant")
                        .WithMany("FavoriteRestaurants")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("FoodDelivery.Domain.Domain.Food", b =>
                {
                    b.HasOne("FoodDelivery.Domain.Domain.FoodCategory", "FoodCategory")
                        .WithMany()
                        .HasForeignKey("FoodCategoryId");

                    b.HasOne("FoodDelivery.Domain.Domain.Restaurant", "Restaurant")
                        .WithMany("Menu")
                        .HasForeignKey("RestaurantId");

                    b.Navigation("FoodCategory");

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("FoodDelivery.Domain.Domain.FoodInOrder", b =>
                {
                    b.HasOne("FoodDelivery.Domain.Domain.Food", "Food")
                        .WithMany()
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodDelivery.Domain.Domain.Order", "Order")
                        .WithMany("FoodsInOrder")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("FoodDelivery.Domain.Domain.FoodInWishlist", b =>
                {
                    b.HasOne("FoodDelivery.Domain.Domain.Food", "Food")
                        .WithMany()
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodDelivery.Domain.Domain.Wishlist", "Wishlist")
                        .WithMany("FoodInWishlists")
                        .HasForeignKey("WishlistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");

                    b.Navigation("Wishlist");
                });

            modelBuilder.Entity("FoodDelivery.Domain.Domain.Order", b =>
                {
                    b.HasOne("FoodDelivery.Domain.Identity.FoodDeliveryAppUser", "Owner")
                        .WithMany("Orders")
                        .HasForeignKey("OwnerId");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("FoodDelivery.Domain.Domain.Restaurant", b =>
                {
                    b.HasOne("FoodDelivery.Domain.Identity.FoodDeliveryAppUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("FoodDelivery.Domain.Domain.Wishlist", b =>
                {
                    b.HasOne("FoodDelivery.Domain.Identity.FoodDeliveryAppUser", "User")
                        .WithOne("Wishlist")
                        .HasForeignKey("FoodDelivery.Domain.Domain.Wishlist", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FoodDelivery.Domain.Identity.FoodDeliveryAppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FoodDelivery.Domain.Identity.FoodDeliveryAppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodDelivery.Domain.Identity.FoodDeliveryAppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FoodDelivery.Domain.Identity.FoodDeliveryAppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FoodDelivery.Domain.Domain.Category", b =>
                {
                    b.Navigation("CategoryInRestaurants");
                });

            modelBuilder.Entity("FoodDelivery.Domain.Domain.Order", b =>
                {
                    b.Navigation("FoodsInOrder");
                });

            modelBuilder.Entity("FoodDelivery.Domain.Domain.Restaurant", b =>
                {
                    b.Navigation("CategoryInRestaurants");

                    b.Navigation("FavoriteRestaurants");

                    b.Navigation("Menu");
                });

            modelBuilder.Entity("FoodDelivery.Domain.Domain.Wishlist", b =>
                {
                    b.Navigation("FoodInWishlists");
                });

            modelBuilder.Entity("FoodDelivery.Domain.Identity.FoodDeliveryAppUser", b =>
                {
                    b.Navigation("DeliveryAddress");

                    b.Navigation("FavoriteRestaurants");

                    b.Navigation("Orders");

                    b.Navigation("Wishlist")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
