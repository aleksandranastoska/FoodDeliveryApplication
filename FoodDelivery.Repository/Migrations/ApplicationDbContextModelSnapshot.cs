// <auto-generated />
using System;
using FoodDelivery.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FoodDelivery.Repository.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FoodDelivery.Domain.Domain.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Flat")
                        .HasColumnType("int");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("FoodDelivery.Domain.Domain.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8fad6114-f063-47fd-bd1d-c69986edfd21"),
                            Image = "../Images/italian.png",
                            Name = "Italian"
                        },
                        new
                        {
                            Id = new Guid("ab9b315a-a4c4-40e7-ab87-a3e77496c366"),
                            Image = "../Images/chinese.png",
                            Name = "Chinese"
                        },
                        new
                        {
                            Id = new Guid("7c017b31-9774-44d3-888f-ae95dedbd308"),
                            Image = "../Images/mexican.png",
                            Name = "Mexican"
                        },
                        new
                        {
                            Id = new Guid("757edbe9-e29a-4af1-96b7-602609b90ac1"),
                            Image = "../Images/indian.png",
                            Name = "Indian"
                        },
                        new
                        {
                            Id = new Guid("60f2687c-d2fc-431d-9b9b-4ae59c1e751b"),
                            Image = "../Images/american.png",
                            Name = "American"
                        },
                        new
                        {
                            Id = new Guid("7b8514df-2879-4969-93f0-f7dfa35923b7"),
                            Image = "../Images/greek.jfif",
                            Name = "Greek"
                        },
                        new
                        {
                            Id = new Guid("0fee258f-f438-40ff-959d-cfad8753b7a5"),
                            Image = "../Images/vegan.png",
                            Name = "Vegan"
                        },
                        new
                        {
                            Id = new Guid("1db37b24-f7c4-4c0d-8de3-2c8ff669d232"),
                            Image = "../Images/vegetarian.png",
                            Name = "Vegetarian"
                        },
                        new
                        {
                            Id = new Guid("5874eee4-137a-45e2-a379-efb79d4a5018"),
                            Image = "../Images/healthy.png",
                            Name = "Healthy"
                        },
                        new
                        {
                            Id = new Guid("00a68c38-bba0-4262-ba7a-9d03bbd18c29"),
                            Image = "../Images/asian.png",
                            Name = "Asian"
                        },
                        new
                        {
                            Id = new Guid("96010e16-dc44-4cb5-a1bd-aac1ba73abfc"),
                            Image = "../Images/breakfast.png",
                            Name = "Breakfast"
                        },
                        new
                        {
                            Id = new Guid("0aae4d7d-7234-4fb7-86f1-f8611ed0d6e6"),
                            Image = "../Images/desserts.png",
                            Name = "Desserts"
                        });
                });

            modelBuilder.Entity("FoodDelivery.Domain.Domain.CategoryInRestaurant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("RestaurantId");

                    b.ToTable("CategoryInRestaurants");
                });

            modelBuilder.Entity("FoodDelivery.Domain.Domain.FavoriteRestaurants", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("bit");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("RestaurantId");

                    b.ToTable("FavoriteRestaurants");
                });

            modelBuilder.Entity("FoodDelivery.Domain.Domain.Food", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("FoodCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<Guid?>("RestaurantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FoodCategoryId");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Foods");
                });

            modelBuilder.Entity("FoodDelivery.Domain.Domain.FoodCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FoodCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3cb15651-deaa-4ce8-81e4-d638b6d88609"),
                            Name = "Breakfast"
                        },
                        new
                        {
                            Id = new Guid("edc65410-a5a6-4b28-9eda-b8cc0e7387ec"),
                            Name = "Salads"
                        },
                        new
                        {
                            Id = new Guid("cd593ba3-35bb-4a6b-8694-2a08ee320c04"),
                            Name = "Pasta"
                        },
                        new
                        {
                            Id = new Guid("ec9fdf8c-41d4-4514-8a97-c0d4d6f0c9ae"),
                            Name = "Pizza"
                        },
                        new
                        {
                            Id = new Guid("a69ecc4b-2dac-4169-96b8-df3618f33cb7"),
                            Name = "Desserts"
                        },
                        new
                        {
                            Id = new Guid("baf73acb-9c01-487c-b55c-8c7b35955266"),
                            Name = "Alcoholic Beverages"
                        },
                        new
                        {
                            Id = new Guid("91b1e7d0-084e-4767-b774-1d9da33bb932"),
                            Name = "Soft Drinks"
                        },
                        new
                        {
                            Id = new Guid("ccf0683d-6ec8-4208-a176-6fa87860e745"),
                            Name = "Hot Drinks"
                        },
                        new
                        {
                            Id = new Guid("359592a1-3621-4848-be2a-66cf22963578"),
                            Name = "Coffee"
                        },
                        new
                        {
                            Id = new Guid("ab5d8210-83ac-4e60-a2f8-b59dd9928acc"),
                            Name = "Main Course"
                        },
                        new
                        {
                            Id = new Guid("2cb85a90-fdc6-4dd5-8c3c-f6606ccfa4b3"),
                            Name = "Starters"
                        },
                        new
                        {
                            Id = new Guid("8cf54d9f-4dd3-4a69-8dd7-d32c0d3fcc8f"),
                            Name = "Brunch"
                        },
                        new
                        {
                            Id = new Guid("6e031bdc-de8a-4f6e-89fe-132cd565167f"),
                            Name = "Burgers"
                        },
                        new
                        {
                            Id = new Guid("bbff7f30-402d-4d5a-9599-3df2edfa3b8b"),
                            Name = "Sandwiches"
                        },
                        new
                        {
                            Id = new Guid("9084ffb8-559e-4782-8253-9fc7ffc32cf4"),
                            Name = "Juices"
                        });
                });

            modelBuilder.Entity("FoodDelivery.Domain.Domain.FoodInOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FoodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FoodId");

                    b.HasIndex("OrderId");

                    b.ToTable("FoodInOrders");
                });

            modelBuilder.Entity("FoodDelivery.Domain.Domain.FoodInWishlist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FoodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid>("WishlistId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FoodId");

                    b.HasIndex("WishlistId");

                    b.ToTable("FoodInWishlists");
                });

            modelBuilder.Entity("FoodDelivery.Domain.Domain.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("FoodDelivery.Domain.Domain.Restaurant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("DeliveryTime")
                        .HasColumnType("int");

                    b.Property<bool?>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NumOfOrders")
                        .HasColumnType("int");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Rating")
                        .HasColumnType("float");

                    b.Property<string>("RestaurantImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TotalGrades")
                        .HasColumnType("int");

                    b.Property<TimeOnly?>("WorkingFrom")
                        .HasColumnType("time");

                    b.Property<TimeOnly?>("WorkingTo")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Restaurants");
                });

            modelBuilder.Entity("FoodDelivery.Domain.Domain.Wishlist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Wishlists");
                });

            modelBuilder.Entity("FoodDelivery.Domain.Identity.FoodDeliveryAppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FoodDelivery.Domain.Domain.Address", b =>
                {
                    b.HasOne("FoodDelivery.Domain.Identity.FoodDeliveryAppUser", "Owner")
                        .WithMany("DeliveryAddress")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("FoodDelivery.Domain.Domain.CategoryInRestaurant", b =>
                {
                    b.HasOne("FoodDelivery.Domain.Domain.Category", "Category")
                        .WithMany("CategoryInRestaurants")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodDelivery.Domain.Domain.Restaurant", "Restaurant")
                        .WithMany("CategoryInRestaurants")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("FoodDelivery.Domain.Domain.FavoriteRestaurants", b =>
                {
                    b.HasOne("FoodDelivery.Domain.Identity.FoodDeliveryAppUser", "Owner")
                        .WithMany("FavoriteRestaurants")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodDelivery.Domain.Domain.Restaurant", "Restaurant")
                        .WithMany("FavoriteRestaurants")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("FoodDelivery.Domain.Domain.Food", b =>
                {
                    b.HasOne("FoodDelivery.Domain.Domain.FoodCategory", "FoodCategory")
                        .WithMany()
                        .HasForeignKey("FoodCategoryId");

                    b.HasOne("FoodDelivery.Domain.Domain.Restaurant", "Restaurant")
                        .WithMany("Menu")
                        .HasForeignKey("RestaurantId");

                    b.Navigation("FoodCategory");

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("FoodDelivery.Domain.Domain.FoodInOrder", b =>
                {
                    b.HasOne("FoodDelivery.Domain.Domain.Food", "Food")
                        .WithMany()
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodDelivery.Domain.Domain.Order", "Order")
                        .WithMany("FoodsInOrder")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("FoodDelivery.Domain.Domain.FoodInWishlist", b =>
                {
                    b.HasOne("FoodDelivery.Domain.Domain.Food", "Food")
                        .WithMany()
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodDelivery.Domain.Domain.Wishlist", "Wishlist")
                        .WithMany("FoodInWishlists")
                        .HasForeignKey("WishlistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");

                    b.Navigation("Wishlist");
                });

            modelBuilder.Entity("FoodDelivery.Domain.Domain.Order", b =>
                {
                    b.HasOne("FoodDelivery.Domain.Domain.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("FoodDelivery.Domain.Identity.FoodDeliveryAppUser", "Owner")
                        .WithMany("Orders")
                        .HasForeignKey("OwnerId");

                    b.Navigation("Address");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("FoodDelivery.Domain.Domain.Restaurant", b =>
                {
                    b.HasOne("FoodDelivery.Domain.Identity.FoodDeliveryAppUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("FoodDelivery.Domain.Domain.Wishlist", b =>
                {
                    b.HasOne("FoodDelivery.Domain.Identity.FoodDeliveryAppUser", "User")
                        .WithOne("Wishlist")
                        .HasForeignKey("FoodDelivery.Domain.Domain.Wishlist", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FoodDelivery.Domain.Identity.FoodDeliveryAppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FoodDelivery.Domain.Identity.FoodDeliveryAppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodDelivery.Domain.Identity.FoodDeliveryAppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FoodDelivery.Domain.Identity.FoodDeliveryAppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FoodDelivery.Domain.Domain.Category", b =>
                {
                    b.Navigation("CategoryInRestaurants");
                });

            modelBuilder.Entity("FoodDelivery.Domain.Domain.Order", b =>
                {
                    b.Navigation("FoodsInOrder");
                });

            modelBuilder.Entity("FoodDelivery.Domain.Domain.Restaurant", b =>
                {
                    b.Navigation("CategoryInRestaurants");

                    b.Navigation("FavoriteRestaurants");

                    b.Navigation("Menu");
                });

            modelBuilder.Entity("FoodDelivery.Domain.Domain.Wishlist", b =>
                {
                    b.Navigation("FoodInWishlists");
                });

            modelBuilder.Entity("FoodDelivery.Domain.Identity.FoodDeliveryAppUser", b =>
                {
                    b.Navigation("DeliveryAddress");

                    b.Navigation("FavoriteRestaurants");

                    b.Navigation("Orders");

                    b.Navigation("Wishlist")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
